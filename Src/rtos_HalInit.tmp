#n
#t/* USER CODE BEGIN RTOS_MUTEX */
#t/* add mutexes, ... */
#t/* USER CODE END RTOS_MUTEX */
#n
#t/* USER CODE BEGIN RTOS_SEMAPHORES */
#t/* add semaphores, ... */
#t/* USER CODE END RTOS_SEMAPHORES */
#n
#t/* USER CODE BEGIN RTOS_TIMERS */
#t/* start timers, add new ones, ... */
#t/* USER CODE END RTOS_TIMERS */
#n#t/* Create the thread(s) */
#t/* definition and creation of defaultTask */
#tosThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
#tdefaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#n
#t/* definition and creation of RadarComm */
#tosThreadDef(RadarComm, StartRadarCommTask, osPriorityNormal, 0, 128);
#tRadarCommHandle = osThreadCreate(osThread(RadarComm), NULL);
#n
#t/* definition and creation of ADASComm */
#tosThreadDef(ADASComm, StartADASCommTask, osPriorityBelowNormal, 0, 128);
#tADASCommHandle = osThreadCreate(osThread(ADASComm), NULL);
#n
#t/* definition and creation of SoundWarning */
#tosThreadDef(SoundWarning, StartSoundWarningTask, osPriorityIdle, 0, 128);
#tSoundWarningHandle = osThreadCreate(osThread(SoundWarning), NULL);
#n
#t/* definition and creation of LightWarning */
#tosThreadDef(LightWarning, StartLightWarningTask, osPriorityIdle, 0, 128);
#tLightWarningHandle = osThreadCreate(osThread(LightWarning), NULL);
#n
#t/* definition and creation of CANSpeedRead */
#tosThreadDef(CANSpeedRead, StartCANSpeedReadTask, osPriorityIdle, 0, 128);
#tCANSpeedReadHandle = osThreadCreate(osThread(CANSpeedRead), NULL);
#n
#n
#t/* USER CODE BEGIN RTOS_THREADS */
#t/* add threads, ... */
#t/* USER CODE END RTOS_THREADS */
#n
#n
#t/* USER CODE BEGIN RTOS_QUEUES */
#t/* add queues, ... */
#t/* USER CODE END RTOS_QUEUES */
